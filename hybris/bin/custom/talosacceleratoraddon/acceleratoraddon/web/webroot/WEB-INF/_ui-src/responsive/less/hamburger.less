@charset "UTF-8";
/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
@hamburger-padding-x: 15px;
@hamburger-padding-y: 19px;
@hamburger-layer-width: 20px;
@hamburger-layer-height: 2px;
@hamburger-layer-spacing: 5px;
@hamburger-layer-color: #000;
@hamburger-layer-border-radius: 4px;
@hamburger-hover-opacity: 0.7;
@hamburger-hover-transition-duration: 0.15s;
@hamburger-hover-transition-timing-function: linear;

// To use CSS filters as the hover effect instead of opacity,
// set @hamburger-hover-use-filter as true and
// change the value of @hamburger-hover-filter accordingly.
@hamburger-hover-use-filter: false;
@hamburger-hover-filter: opacity(50%);

// Hamburger
// ==================================================
.hamburger {
  padding: @hamburger-padding-y @hamburger-padding-x;
  display: inline-block;
  cursor: pointer;

  transition-property: opacity, filter;
  transition-duration: @hamburger-hover-transition-duration;
  transition-timing-function: @hamburger-hover-transition-timing-function;

  // Normalize (<button>)
  font: inherit;
  font-size: 0;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;

  &:hover {
    opacity: @hamburger-hover-opacity;
  }
}

.hamburger-box {
  width: @hamburger-layer-width;
  height: @hamburger-layer-height * 3 + @hamburger-layer-spacing * 2;
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: @hamburger-layer-height / -2;

  &,
  &::before,
  &::after {
    width: @hamburger-layer-width;
    height: @hamburger-layer-height;
    background-color: @hamburger-layer-color;
    border-radius: @hamburger-layer-border-radius;
    position: absolute;
    transition-property: transform;
    transition-duration: 0.25s;
    transition-timing-function: ease;
  }

  &::before,
  &::after {
    content: "";
    display: block;
  }

  &::before {
    top: (@hamburger-layer-spacing + @hamburger-layer-height) * -1;
  }

  &::after {
    bottom: (@hamburger-layer-spacing + @hamburger-layer-height) * -1;
  }
}

/*
   * Spring
   */
.hamburger--spring {
  .hamburger-inner {
    top: @hamburger-layer-height / 2;
    transition: background-color 0s 0.23s linear;

    &::before {
      top: @hamburger-layer-height + @hamburger-layer-spacing;
      transition: top 0.3s 0.4s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
      transform 0.33s cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }

    &::after {
      top: (@hamburger-layer-height * 2) + (@hamburger-layer-spacing * 2);
      transition: top 0.4s 0.4s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
      transform 0.33s cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
  }

  &.is-active {
    .hamburger-inner {
      transition-delay: 0.42s;
      background-color: transparent;

      &::before {
        top: 0;
        transition: top 0.3s 0.35s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
        transform 0.33s 0.42s cubic-bezier(0.215, 0.61, 0.355, 1);
        transform: translate3d(0, @hamburger-layer-spacing + @hamburger-layer-height, 0) rotate(45deg);
      }

      &::after {
        top: 0;
        transition: top 0.4s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
        transform 0.33s 0.42s cubic-bezier(0.215, 0.61, 0.355, 1);
        transform: translate3d(0, @hamburger-layer-spacing + @hamburger-layer-height, 0) rotate(-45deg);
      }
    }
  }
}
